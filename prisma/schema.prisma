// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// vistor is a temporary model to store the fingerprint of the user
model Vistor {
  id              String     @id @default(cuid())
  fingerprintHash String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  chats           Chat[]
  User            User[]
  Donation        Donation[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MissionStripe {
  id        Int     @id @default(autoincrement())
  missionId Int
  mission   Mission @relation(fields: [missionId], references: [id])
  stripeId  String
  linkId    String
}

model Mission {
  // we will use ID to store information about the mission in pinecone vector db
  id             Int              @id @default(autoincrement())
  name           String
  party          String?
  description    String
  goalText       String?
  subtitle       String?
  isUrget        Boolean          @default(false)
  image          String
  aiModel        String? // Could represent the file or URL of the AI model for the chatbot (if we go with fine-tuning)
  Chat           Chat[]
  totalDonations Float            @default(0)
  totalDonors    Int              @default(0)
  createdAt      DateTime         @default(now())
  creatorId      String
  updatedAt      DateTime         @updatedAt
  creator        User             @relation(fields: [creatorId], references: [id])
  MissionUpdates MissionUpdates[]
  Donation       Donation[]
  MissionVector  MissionVector[]
  MissionStripe  MissionStripe[]
}

model Chat {
  id            Int             @id @default(autoincrement())
  userId        String?
  user          User?           @relation(fields: [userId], references: [id])
  vistorId      String?
  vistor        Vistor?         @relation(fields: [vistorId], references: [id], onDelete: Cascade)
  missionId     Int
  mission       Mission         @relation(fields: [missionId], references: [id])
  messages      Message[]
  accountId     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MessageVector MessageVector[]

  @@index([userId, missionId], name: "mission_user_chat_index")
  @@index([vistorId, missionId], name: "mission_vistor_chat_index")
  // index createdAt and updatedAt
  @@index([createdAt], name: "chat_createdAt_index")
  @@index([updatedAt], name: "chat_updatedAt_index")
}

model MessageVector {
  id        String                 @id @default(cuid())
  messageId Int
  chatId    Int
  content   String                 @db.Text
  message   Message                @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chat      Chat                   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  vector    Unsupported("vector")?

  @@index([chatId, messageId], name: "chat_message_index")
}

/// this should also be stored in vector database for now we will use it as a reference to the pinecone
model Message {
  id            Int             @id @default(autoincrement())
  timestamp     DateTime        @default(now())
  questionText  String          @db.Text
  answerText    String          @db.Text
  isError       Boolean         @default(false)
  chatId        Int
  chat          Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  MessageVector MessageVector[]

  @@index([chatId, timestamp], name: "chat_timestamp_index")
}

enum Role {
  BACKOFFICE
  USER
}

enum MissionVectorPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MissionVectorStatus {
  PENDING
  APPROVED
  REJECTED
}

model MissionVector {
  id                   String                 @id @default(cuid())
  vector               Unsupported("vector")?
  missionId            Int
  content              String                 @db.Text
  approved             Boolean                @default(false)
  approvedById         String?
  source               String                 @default("manual")
  sourceUrl             String?
  status              MissionVectorStatus                 @default(PENDING)
  approvedBy           User?                  @relation(fields: [approvedById], references: [id])
  priority             MissionVectorPriority               @default(LOW)
  title                String
  aiNote               String?                @db.Text
  approvedAt           DateTime?
  approverNote         String?                @db.Text
  aiQualityScore       Int // 1-100
  approverQualityScore Int? // 1-100
  mission              Mission                @relation(fields: [missionId], references: [id], onDelete: Cascade)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([missionId], name: "mission_memory_index")
  @@index([approvedById], name: "approvedBy_index")
  @@index([createdAt], name: "memory_createdAt_index")
  @@index([aiQualityScore], name: "memory_aiQualityScore_index")
  @@index([title], name: "memory_title_index")
  @@index([priority], name: "memory_priority_index")
  @@index([status], name: "memory_status_index")
}

model MissionUpdatesItem {
  id              Int            @id @default(autoincrement())
  missionUpdateId Int
  missionUpdate   MissionUpdates @relation(fields: [missionUpdateId], references: [id])
  content         String         @db.Text
  link            String
  logo            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model MissionUpdates {
  id                 Int                  @id @default(autoincrement())
  missionId          Int
  mission            Mission              @relation(fields: [missionId], references: [id])
  content            String               @db.Text
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  missionUpdatesItem MissionUpdatesItem[]
}

model Donation {
  id          Int      @id @default(autoincrement())
  amount      Float
  userId      String?
  visitorId   String?
  asAnonymous Boolean  @default(false)
  visitor     Vistor?  @relation(fields: [visitorId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  missionId   Int
  mission     Mission  @relation(fields: [missionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                        String          @id @default(cuid())
  name                      String?
  email                     String?         @unique
  password                  String?
  emailVerified             DateTime?
  requiresEmailVerification Boolean         @default(false)
  visitorId                 String?
  image                     String?
  visitor                   Vistor?         @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  accounts                  Account[]
  sessions                  Session[]
  donations                 Donation[]
  Chat                      Chat[]
  Mission                   Mission[]
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  role                      Role            @default(USER)
  MissionVector             MissionVector[]

  @@index([email])
  @@index([email, password])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
