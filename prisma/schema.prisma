// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// vistor is a temporary model to store the fingerprint of the user
model Vistor {
  id          String   @id @default(cuid())
  fingerprintHash String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chats       Chat[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Mission {
  // we will use ID to store information about the mission in pinecone vector db
  id             Int              @id @default(autoincrement())
  name           String
  party          String?
  description    String
  goalText      String?
  subtitle       String?
  isUrget        Boolean          @default(false)
  image          String
  aiModel        String? // Could represent the file or URL of the AI model for the chatbot (if we go with fine-tuning)
  Chat           Chat[]
  createdAt      DateTime         @default(now())
  creatorId      String
  updatedAt      DateTime         @updatedAt
  creator        User             @relation(fields: [creatorId], references: [id])
  MissionUpdates MissionUpdates[]
  Donation       Donation[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  vistorId  String?
  vistor    Vistor?   @relation(fields: [vistorId], references: [id])
  missionId Int
  mission   Mission  @relation(fields: [missionId], references: [id])
  messages  Message[]
  accountId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId, missionId], name: "mission_user_chat_index")
  @@index([vistorId, missionId], name: "mission_vistor_chat_index")
  // index createdAt and updatedAt
  @@index([createdAt], name: "chat_createdAt_index")
  @@index([updatedAt], name: "chat_updatedAt_index")
}

/// this should also be stored in vector database for now we will use it as a reference to the pinecone
model Message {
  id         Int      @id @default(autoincrement())
  content    String
  timestamp  DateTime @default(now())
  isResponse Boolean  @default(false)
  chatId     Int
  chat       Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId, timestamp], name: "chat_timestamp_index")
}

model MissionUpdatesItem {
  id              Int            @id @default(autoincrement())
  missionUpdateId Int
  missionUpdate   MissionUpdates @relation(fields: [missionUpdateId], references: [id])
  content         String
  link            String
  logo            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model MissionUpdates {
  id                 Int                  @id @default(autoincrement())
  missionId          Int
  mission            Mission              @relation(fields: [missionId], references: [id])
  content            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  missionUpdatesItem MissionUpdatesItem[]
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  missionId Int
  mission   Mission  @relation(fields: [missionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  donations     Donation[]
  Chat          Chat[]
  Mission       Mission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
